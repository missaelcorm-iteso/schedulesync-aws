
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # module.acm.aws_acm_certificate.main will be created
  + resource "aws_acm_certificate" "main" {
      + arn                       = (known after apply)
      + domain_name               = "missael.xyz"
      + domain_validation_options = [
          + {
              + domain_name           = "*.missael.xyz"
              + resource_record_name  = (known after apply)
              + resource_record_type  = (known after apply)
              + resource_record_value = (known after apply)
            },
          + {
              + domain_name           = "api.schedulesync-dev.missael.xyz"
              + resource_record_name  = (known after apply)
              + resource_record_type  = (known after apply)
              + resource_record_value = (known after apply)
            },
          + {
              + domain_name           = "missael.xyz"
              + resource_record_name  = (known after apply)
              + resource_record_type  = (known after apply)
              + resource_record_value = (known after apply)
            },
        ]
      + id                        = (known after apply)
      + key_algorithm             = (known after apply)
      + not_after                 = (known after apply)
      + not_before                = (known after apply)
      + pending_renewal           = (known after apply)
      + renewal_eligibility       = (known after apply)
      + renewal_summary           = (known after apply)
      + status                    = (known after apply)
      + subject_alternative_names = [
          + "*.missael.xyz",
          + "api.schedulesync-dev.missael.xyz",
          + "missael.xyz",
        ]
      + tags                      = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-certificate"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                  = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-certificate"
          + "Project"     = "ScheduleSync"
        }
      + type                      = (known after apply)
      + validation_emails         = (known after apply)
      + validation_method         = "DNS"

      + options (known after apply)
    }

  # module.acm.aws_acm_certificate_validation.main will be created
  + resource "aws_acm_certificate_validation" "main" {
      + certificate_arn         = (known after apply)
      + id                      = (known after apply)
      + validation_record_fqdns = (known after apply)
    }

  # module.acm.cloudflare_record.acm_validation["*.missael.xyz"] will be created
  + resource "cloudflare_record" "acm_validation" {
      + allow_overwrite = false
      + content         = (known after apply)
      + created_on      = (known after apply)
      + hostname        = (known after apply)
      + id              = (known after apply)
      + metadata        = (known after apply)
      + modified_on     = (known after apply)
      + name            = (known after apply)
      + proxiable       = (known after apply)
      + proxied         = false
      + ttl             = 60
      + type            = (known after apply)
      + value           = (known after apply)
      + zone_id         = "66c3a47d7eb630244d3e6f3e60f374b5"
    }

  # module.acm.cloudflare_record.acm_validation["api.schedulesync-dev.missael.xyz"] will be created
  + resource "cloudflare_record" "acm_validation" {
      + allow_overwrite = false
      + content         = (known after apply)
      + created_on      = (known after apply)
      + hostname        = (known after apply)
      + id              = (known after apply)
      + metadata        = (known after apply)
      + modified_on     = (known after apply)
      + name            = (known after apply)
      + proxiable       = (known after apply)
      + proxied         = false
      + ttl             = 60
      + type            = (known after apply)
      + value           = (known after apply)
      + zone_id         = "66c3a47d7eb630244d3e6f3e60f374b5"
    }

  # module.acm.cloudflare_record.acm_validation["missael.xyz"] will be created
  + resource "cloudflare_record" "acm_validation" {
      + allow_overwrite = false
      + content         = (known after apply)
      + created_on      = (known after apply)
      + hostname        = (known after apply)
      + id              = (known after apply)
      + metadata        = (known after apply)
      + modified_on     = (known after apply)
      + name            = (known after apply)
      + proxiable       = (known after apply)
      + proxied         = false
      + ttl             = 60
      + type            = (known after apply)
      + value           = (known after apply)
      + zone_id         = "66c3a47d7eb630244d3e6f3e60f374b5"
    }

  # module.alb.aws_cloudwatch_metric_alarm.alb_4xx will be created
  + resource "aws_cloudwatch_metric_alarm" "alb_4xx" {
      + actions_enabled                       = true
      + alarm_description                     = "This metric monitors ALB 4XX errors"
      + alarm_name                            = "ScheduleSync-dev-alb-4xx"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "HTTPCode_Target_4XX_Count"
      + namespace                             = "AWS/ApplicationELB"
      + period                                = 300
      + statistic                             = "Sum"
      + tags                                  = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + threshold                             = 50
      + treat_missing_data                    = "missing"
    }

  # module.alb.aws_cloudwatch_metric_alarm.alb_5xx will be created
  + resource "aws_cloudwatch_metric_alarm" "alb_5xx" {
      + actions_enabled                       = true
      + alarm_description                     = "This metric monitors ALB 5XX errors"
      + alarm_name                            = "ScheduleSync-dev-alb-5xx"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "HTTPCode_Target_5XX_Count"
      + namespace                             = "AWS/ApplicationELB"
      + period                                = 300
      + statistic                             = "Sum"
      + tags                                  = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + threshold                             = 10
      + treat_missing_data                    = "missing"
    }

  # module.alb.aws_lb.main will be created
  + resource "aws_lb" "main" {
      + arn                                         = (known after apply)
      + arn_suffix                                  = (known after apply)
      + desync_mitigation_mode                      = "defensive"
      + dns_name                                    = (known after apply)
      + drop_invalid_header_fields                  = false
      + enable_deletion_protection                  = true
      + enable_http2                                = true
      + enable_tls_version_and_cipher_suite_headers = false
      + enable_waf_fail_open                        = false
      + enable_xff_client_port                      = false
      + id                                          = (known after apply)
      + idle_timeout                                = 60
      + internal                                    = false
      + ip_address_type                             = "ipv4"
      + load_balancer_type                          = "application"
      + name                                        = "ScheduleSync-dev-alb"
      + preserve_host_header                        = false
      + security_groups                             = (known after apply)
      + subnets                                     = (known after apply)
      + tags                                        = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                                    = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + vpc_id                                      = (known after apply)
      + xff_header_processing_mode                  = "append"
      + zone_id                                     = (known after apply)

      + access_logs {
          + bucket  = (known after apply)
          + enabled = true
          + prefix  = "alb-logs"
        }

      + subnet_mapping (known after apply)
    }

  # module.alb.aws_lb_listener.http will be created
  + resource "aws_lb_listener" "http" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = (known after apply)

      + default_action {
          + order = (known after apply)
          + type  = "redirect"

          + redirect {
              + host        = "#{host}"
              + path        = "/#{path}"
              + port        = "443"
              + protocol    = "HTTPS"
              + query       = "#{query}"
              + status_code = "HTTP_301"
            }
        }
    }

  # module.alb.aws_lb_listener.https will be created
  + resource "aws_lb_listener" "https" {
      + arn               = (known after apply)
      + certificate_arn   = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 443
      + protocol          = "HTTPS"
      + ssl_policy        = "ELBSecurityPolicy-FS-1-2-Res-2020-10"
      + tags_all          = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # module.alb.aws_lb_listener_rule.backend will be created
  + resource "aws_lb_listener_rule" "backend" {
      + arn          = (known after apply)
      + id           = (known after apply)
      + listener_arn = (known after apply)
      + priority     = 100
      + tags_all     = (known after apply)

      + action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + condition {
          + path_pattern {
              + values = [
                  + "/api/*",
                ]
            }
        }
    }

  # module.alb.aws_lb_target_group.backend will be created
  + resource "aws_lb_target_group" "backend" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = false
      + deregistration_delay               = "30"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "ScheduleSync-dev-backend"
      + port                               = 3000
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 2
          + interval            = 30
          + matcher             = "200"
          + path                = "/health"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)
    }

  # module.alb.aws_lb_target_group.frontend will be created
  + resource "aws_lb_target_group" "frontend" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = false
      + deregistration_delay               = "30"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "ScheduleSync-dev-frontend"
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 2
          + interval            = 30
          + matcher             = "200"
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)
    }

  # module.alb.aws_s3_bucket.alb_logs will be created
  + resource "aws_s3_bucket" "alb_logs" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "ScheduleSync-dev-alb-logs"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                    = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.alb.aws_s3_bucket_lifecycle_configuration.alb_logs will be created
  + resource "aws_s3_bucket_lifecycle_configuration" "alb_logs" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + id     = "log_retention"
          + status = "Enabled"

          + expiration {
              + days                         = 90
              + expired_object_delete_marker = (known after apply)
            }

          + transition {
              + days          = 30
              + storage_class = "STANDARD_IA"
                # (1 unchanged attribute hidden)
            }
          + transition {
              + days          = 60
              + storage_class = "GLACIER"
                # (1 unchanged attribute hidden)
            }
        }
    }

  # module.alb.aws_s3_bucket_policy.alb_logs will be created
  + resource "aws_s3_bucket_policy" "alb_logs" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.alb.aws_s3_bucket_public_access_block.alb_logs will be created
  + resource "aws_s3_bucket_public_access_block" "alb_logs" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.alb.aws_s3_bucket_server_side_encryption_configuration.alb_logs will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "alb_logs" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm     = "AES256"
                # (1 unchanged attribute hidden)
            }
        }
    }

  # module.backend_service.data.aws_ecs_cluster.main will be read during apply
  # (config refers to values not yet known)
 <= data "aws_ecs_cluster" "main" {
      + arn                                  = (known after apply)
      + cluster_name                         = (known after apply)
      + id                                   = (known after apply)
      + pending_tasks_count                  = (known after apply)
      + registered_container_instances_count = (known after apply)
      + running_tasks_count                  = (known after apply)
      + service_connect_defaults             = (known after apply)
      + setting                              = (known after apply)
      + status                               = (known after apply)
      + tags                                 = (known after apply)
    }

  # module.backend_service.aws_appautoscaling_policy.backend_cpu will be created
  + resource "aws_appautoscaling_policy" "backend_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "ScheduleSync-dev-backend-cpu"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in = false
          + target_value     = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.backend_service.aws_appautoscaling_policy.backend_memory will be created
  + resource "aws_appautoscaling_policy" "backend_memory" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "ScheduleSync-dev-backend-memory"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in = false
          + target_value     = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageMemoryUtilization"
            }
        }
    }

  # module.backend_service.aws_appautoscaling_target.backend will be created
  + resource "aws_appautoscaling_target" "backend" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 6
      + min_capacity       = 1
      + resource_id        = (known after apply)
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = (known after apply)
    }

  # module.backend_service.aws_cloudwatch_log_group.backend will be created
  + resource "aws_cloudwatch_log_group" "backend" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "/ecs/ScheduleSync-dev-backend"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
    }

  # module.backend_service.aws_ecs_service.backend will be created
  + resource "aws_ecs_service" "backend" {
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + health_check_grace_period_seconds  = 60
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "ScheduleSync-dev-backend"
      + platform_version                   = "LATEST"
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + deployment_circuit_breaker {
          + enable   = true
          + rollback = true
        }

      + deployment_controller {
          + type = "ECS"
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }

      + service_registries {
          + registry_arn = (known after apply)
        }
    }

  # module.backend_service.aws_ecs_task_definition.backend will be created
  + resource "aws_ecs_task_definition" "backend" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = jsonencode(
            [
              + {
                  + environment      = [
                      + {
                          + name  = "NODE_ENV"
                          + value = "dev"
                        },
                      + {
                          + name  = "PORT"
                          + value = "3000"
                        },
                    ]
                  + essential        = true
                  + healthCheck      = {
                      + command     = [
                          + "CMD-SHELL",
                          + "curl -f http://localhost:3000/health || exit 1",
                        ]
                      + interval    = 30
                      + retries     = 3
                      + startPeriod = 60
                      + timeout     = 5
                    }
                  + image            = "public.ecr.aws/nginx/nginx:latest"
                  + logConfiguration = {
                      + logDriver = "awslogs"
                      + options   = {
                          + awslogs-group         = "/ecs/ScheduleSync-dev-backend"
                          + awslogs-region        = "us-west-2"
                          + awslogs-stream-prefix = "backend"
                        }
                    }
                  + name             = "backend"
                  + portMappings     = [
                      + {
                          + containerPort = 3000
                          + protocol      = "tcp"
                        },
                    ]
                  + secrets          = [
                      + {
                          + name      = "DATABASE_URL"
                          + valueFrom = "arn:aws:ssm:us-west-2:727646471395:parameter/ScheduleSync/dev/database_url"
                        },
                    ]
                },
            ]
        )
      + cpu                      = "512"
      + execution_role_arn       = (known after apply)
      + family                   = "ScheduleSync-dev-backend"
      + id                       = (known after apply)
      + memory                   = "1024"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + task_role_arn            = (known after apply)
    }

  # module.backend_service.aws_service_discovery_service.backend will be created
  + resource "aws_service_discovery_service" "backend" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "backend"
      + namespace_id  = (known after apply)
      + tags_all      = (known after apply)
      + type          = (known after apply)

      + dns_config {
          + namespace_id   = (known after apply)
          + routing_policy = "MULTIVALUE"

          + dns_records {
              + ttl  = 10
              + type = "A"
            }
        }

      + health_check_custom_config {
          + failure_threshold = 1
        }
    }

  # module.dns.cloudflare_record.api will be created
  + resource "cloudflare_record" "api" {
      + allow_overwrite = false
      + content         = (known after apply)
      + created_on      = (known after apply)
      + hostname        = (known after apply)
      + id              = (known after apply)
      + metadata        = (known after apply)
      + modified_on     = (known after apply)
      + name            = "api.schedulesync-dev"
      + proxiable       = (known after apply)
      + proxied         = true
      + ttl             = 1
      + type            = "CNAME"
      + value           = (known after apply)
      + zone_id         = "66c3a47d7eb630244d3e6f3e60f374b5"
    }

  # module.dns.cloudflare_record.main will be created
  + resource "cloudflare_record" "main" {
      + allow_overwrite = false
      + content         = (known after apply)
      + created_on      = (known after apply)
      + hostname        = (known after apply)
      + id              = (known after apply)
      + metadata        = (known after apply)
      + modified_on     = (known after apply)
      + name            = "schedulesync-dev"
      + proxiable       = (known after apply)
      + proxied         = true
      + ttl             = 1
      + type            = "CNAME"
      + value           = (known after apply)
      + zone_id         = "66c3a47d7eb630244d3e6f3e60f374b5"
    }

  # module.dns.cloudflare_zone_settings_override.main will be created
  + resource "cloudflare_zone_settings_override" "main" {
      + id                       = (known after apply)
      + initial_settings         = (known after apply)
      + initial_settings_read_at = (known after apply)
      + readonly_settings        = (known after apply)
      + zone_id                  = "66c3a47d7eb630244d3e6f3e60f374b5"
      + zone_status              = (known after apply)
      + zone_type                = (known after apply)

      + settings {
          + always_online               = (known after apply)
          + always_use_https            = "on"
          + automatic_https_rewrites    = "on"
          + binary_ast                  = (known after apply)
          + brotli                      = (known after apply)
          + browser_cache_ttl           = (known after apply)
          + browser_check               = (known after apply)
          + cache_level                 = (known after apply)
          + challenge_ttl               = (known after apply)
          + ciphers                     = (known after apply)
          + cname_flattening            = (known after apply)
          + development_mode            = (known after apply)
          + early_hints                 = (known after apply)
          + email_obfuscation           = (known after apply)
          + filter_logs_to_cloudflare   = (known after apply)
          + fonts                       = (known after apply)
          + h2_prioritization           = (known after apply)
          + hotlink_protection          = (known after apply)
          + http2                       = (known after apply)
          + http3                       = (known after apply)
          + image_resizing              = (known after apply)
          + ip_geolocation              = (known after apply)
          + ipv6                        = (known after apply)
          + log_to_cloudflare           = (known after apply)
          + max_upload                  = (known after apply)
          + min_tls_version             = "1.2"
          + mirage                      = (known after apply)
          + opportunistic_encryption    = (known after apply)
          + opportunistic_onion         = (known after apply)
          + orange_to_orange            = (known after apply)
          + origin_error_page_pass_thru = (known after apply)
          + origin_max_http_version     = (known after apply)
          + polish                      = (known after apply)
          + prefetch_preload            = (known after apply)
          + privacy_pass                = (known after apply)
          + proxy_read_timeout          = (known after apply)
          + pseudo_ipv4                 = (known after apply)
          + replace_insecure_js         = (known after apply)
          + response_buffering          = (known after apply)
          + rocket_loader               = (known after apply)
          + security_level              = (known after apply)
          + server_side_exclude         = (known after apply)
          + sort_query_string_for_cache = (known after apply)
          + speed_brain                 = (known after apply)
          + ssl                         = "strict"
          + tls_1_2_only                = (known after apply)
          + tls_1_3                     = "on"
          + tls_client_auth             = (known after apply)
          + true_client_ip_header       = (known after apply)
          + universal_ssl               = (known after apply)
          + visitor_ip                  = (known after apply)
          + waf                         = (known after apply)
          + webp                        = (known after apply)
          + websockets                  = (known after apply)
          + zero_rtt                    = (known after apply)

          + minify (known after apply)

          + mobile_redirect (known after apply)

          + nel (known after apply)

          + security_header (known after apply)
        }
    }

  # module.ecs_cluster.aws_cloudwatch_log_group.ecs will be created
  + resource "aws_cloudwatch_log_group" "ecs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "/ecs/ScheduleSync-dev-cluster"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
    }

  # module.ecs_cluster.aws_ecs_cluster.main will be created
  + resource "aws_ecs_cluster" "main" {
      + arn                = (known after apply)
      + capacity_providers = (known after apply)
      + id                 = (known after apply)
      + name               = "ScheduleSync-dev-cluster"
      + tags               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }

      + default_capacity_provider_strategy (known after apply)

      + setting {
          + name  = "containerInsights"
          + value = "enabled"
        }
    }

  # module.ecs_cluster.aws_ecs_cluster_capacity_providers.main will be created
  + resource "aws_ecs_cluster_capacity_providers" "main" {
      + capacity_providers = [
          + "FARGATE",
          + "FARGATE_SPOT",
        ]
      + cluster_name       = "ScheduleSync-dev-cluster"
      + id                 = (known after apply)

      + default_capacity_provider_strategy {
          + base              = 0
          + capacity_provider = "FARGATE_SPOT"
          + weight            = 4
        }
      + default_capacity_provider_strategy {
          + base              = 1
          + capacity_provider = "FARGATE"
          + weight            = 1
        }
    }

  # module.ecs_cluster.aws_service_discovery_private_dns_namespace.main will be created
  + resource "aws_service_discovery_private_dns_namespace" "main" {
      + arn         = (known after apply)
      + description = "Service discovery namespace for ECS services"
      + hosted_zone = (known after apply)
      + id          = (known after apply)
      + name        = "ScheduleSync.dev.local"
      + tags        = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all    = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + vpc         = (known after apply)
    }

  # module.frontend_service.data.aws_ecs_cluster.main will be read during apply
  # (config refers to values not yet known)
 <= data "aws_ecs_cluster" "main" {
      + arn                                  = (known after apply)
      + cluster_name                         = (known after apply)
      + id                                   = (known after apply)
      + pending_tasks_count                  = (known after apply)
      + registered_container_instances_count = (known after apply)
      + running_tasks_count                  = (known after apply)
      + service_connect_defaults             = (known after apply)
      + setting                              = (known after apply)
      + status                               = (known after apply)
      + tags                                 = (known after apply)
    }

  # module.frontend_service.aws_appautoscaling_policy.frontend_cpu will be created
  + resource "aws_appautoscaling_policy" "frontend_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "ScheduleSync-dev-frontend-cpu"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in = false
          + target_value     = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.frontend_service.aws_appautoscaling_policy.frontend_memory will be created
  + resource "aws_appautoscaling_policy" "frontend_memory" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "ScheduleSync-dev-frontend-memory"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in = false
          + target_value     = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageMemoryUtilization"
            }
        }
    }

  # module.frontend_service.aws_appautoscaling_target.frontend will be created
  + resource "aws_appautoscaling_target" "frontend" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 6
      + min_capacity       = 1
      + resource_id        = (known after apply)
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = (known after apply)
    }

  # module.frontend_service.aws_cloudwatch_log_group.frontend will be created
  + resource "aws_cloudwatch_log_group" "frontend" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "/ecs/ScheduleSync-dev-frontend"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
    }

  # module.frontend_service.aws_cloudwatch_metric_alarm.frontend_cpu_high will be created
  + resource "aws_cloudwatch_metric_alarm" "frontend_cpu_high" {
      + actions_enabled                       = true
      + alarm_description                     = "This metric monitors frontend ECS CPU utilization"
      + alarm_name                            = "ScheduleSync-dev-frontend-cpu-high"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/ECS"
      + period                                = 300
      + statistic                             = "Average"
      + tags                                  = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + threshold                             = 85
      + treat_missing_data                    = "missing"
    }

  # module.frontend_service.aws_cloudwatch_metric_alarm.frontend_memory_high will be created
  + resource "aws_cloudwatch_metric_alarm" "frontend_memory_high" {
      + actions_enabled                       = true
      + alarm_description                     = "This metric monitors frontend ECS memory utilization"
      + alarm_name                            = "ScheduleSync-dev-frontend-memory-high"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "MemoryUtilization"
      + namespace                             = "AWS/ECS"
      + period                                = 300
      + statistic                             = "Average"
      + tags                                  = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + threshold                             = 85
      + treat_missing_data                    = "missing"
    }

  # module.frontend_service.aws_ecs_service.frontend will be created
  + resource "aws_ecs_service" "frontend" {
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + health_check_grace_period_seconds  = 60
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "ScheduleSync-dev-frontend"
      + platform_version                   = "LATEST"
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + deployment_circuit_breaker {
          + enable   = true
          + rollback = true
        }

      + deployment_controller {
          + type = "ECS"
        }

      + load_balancer {
          + container_name   = "frontend"
          + container_port   = 80
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.frontend_service.aws_ecs_task_definition.frontend will be created
  + resource "aws_ecs_task_definition" "frontend" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = jsonencode(
            [
              + {
                  + environment      = [
                      + {
                          + name  = "API_URL"
                          + value = "https://missael.xyz/api"
                        },
                      + {
                          + name  = "API_URL"
                          + value = "https://missael.xyz/api"
                        },
                      + {
                          + name  = "NODE_ENV"
                          + value = "dev"
                        },
                      + {
                          + name  = "NODE_ENV"
                          + value = "dev"
                        },
                    ]
                  + essential        = true
                  + healthCheck      = {
                      + command     = [
                          + "CMD-SHELL",
                          + "curl -f http://localhost:80/ || exit 1",
                        ]
                      + interval    = 30
                      + retries     = 3
                      + startPeriod = 60
                      + timeout     = 5
                    }
                  + image            = "public.ecr.aws/nginx/nginx:latest"
                  + logConfiguration = {
                      + logDriver = "awslogs"
                      + options   = {
                          + awslogs-group         = "/ecs/ScheduleSync-dev-frontend"
                          + awslogs-region        = "us-west-2"
                          + awslogs-stream-prefix = "frontend"
                        }
                    }
                  + name             = "frontend"
                  + portMappings     = [
                      + {
                          + containerPort = 80
                          + protocol      = "tcp"
                        },
                    ]
                  + secrets          = []
                },
            ]
        )
      + cpu                      = "256"
      + execution_role_arn       = (known after apply)
      + family                   = "ScheduleSync-dev-frontend"
      + id                       = (known after apply)
      + memory                   = "512"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + task_role_arn            = (known after apply)
    }

  # module.networking.aws_eip.nat[0] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-nat-eip-us-west-2a"
          + "Project"     = "ScheduleSync"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-nat-eip-us-west-2a"
          + "Project"     = "ScheduleSync"
        }
      + vpc                  = true
    }

  # module.networking.aws_eip.nat[1] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-nat-eip-us-west-2b"
          + "Project"     = "ScheduleSync"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-nat-eip-us-west-2b"
          + "Project"     = "ScheduleSync"
        }
      + vpc                  = true
    }

  # module.networking.aws_internet_gateway.main will be created
  + resource "aws_internet_gateway" "main" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-igw"
          + "Project"     = "ScheduleSync"
        }
      + tags_all = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-igw"
          + "Project"     = "ScheduleSync"
        }
      + vpc_id   = (known after apply)
    }

  # module.networking.aws_nat_gateway.main[0] will be created
  + resource "aws_nat_gateway" "main" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-nat-us-west-2a"
          + "Project"     = "ScheduleSync"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-nat-us-west-2a"
          + "Project"     = "ScheduleSync"
        }
    }

  # module.networking.aws_nat_gateway.main[1] will be created
  + resource "aws_nat_gateway" "main" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-nat-us-west-2b"
          + "Project"     = "ScheduleSync"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-nat-us-west-2b"
          + "Project"     = "ScheduleSync"
        }
    }

  # module.networking.aws_route_table.private[0] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (12 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-private-rt-us-west-2a"
          + "Project"     = "ScheduleSync"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-private-rt-us-west-2a"
          + "Project"     = "ScheduleSync"
        }
      + vpc_id           = (known after apply)
    }

  # module.networking.aws_route_table.private[1] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (12 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-private-rt-us-west-2b"
          + "Project"     = "ScheduleSync"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-private-rt-us-west-2b"
          + "Project"     = "ScheduleSync"
        }
      + vpc_id           = (known after apply)
    }

  # module.networking.aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (12 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-public-rt"
          + "Project"     = "ScheduleSync"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-public-rt"
          + "Project"     = "ScheduleSync"
        }
      + vpc_id           = (known after apply)
    }

  # module.networking.aws_route_table_association.private[0] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.networking.aws_route_table_association.private[1] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.networking.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.networking.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.networking.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.0.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-private-us-west-2a"
          + "Project"     = "ScheduleSync"
          + "Tier"        = "Private"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-private-us-west-2a"
          + "Project"     = "ScheduleSync"
          + "Tier"        = "Private"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.networking.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.16.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-private-us-west-2b"
          + "Project"     = "ScheduleSync"
          + "Tier"        = "Private"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-private-us-west-2b"
          + "Project"     = "ScheduleSync"
          + "Tier"        = "Private"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.networking.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.64.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-public-us-west-2a"
          + "Project"     = "ScheduleSync"
          + "Tier"        = "Public"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-public-us-west-2a"
          + "Project"     = "ScheduleSync"
          + "Tier"        = "Public"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.networking.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.80.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-public-us-west-2b"
          + "Project"     = "ScheduleSync"
          + "Tier"        = "Public"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-public-us-west-2b"
          + "Project"     = "ScheduleSync"
          + "Tier"        = "Public"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.networking.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-vpc"
          + "Project"     = "ScheduleSync"
        }
      + tags_all                             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-vpc"
          + "Project"     = "ScheduleSync"
        }
    }

  # module.security.aws_iam_role.backend_task will be created
  + resource "aws_iam_role" "backend_task" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "ScheduleSync-dev-backend-task"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.security.aws_iam_role.ecs_task_execution will be created
  + resource "aws_iam_role" "ecs_task_execution" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "ScheduleSync-dev-ecs-execution"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.security.aws_iam_role.frontend_task will be created
  + resource "aws_iam_role" "frontend_task" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "ScheduleSync-dev-frontend-task"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "ScheduleSync"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.security.aws_iam_role_policy.backend_task will be created
  + resource "aws_iam_role_policy" "backend_task" {
      + id     = (known after apply)
      + name   = "ScheduleSync-dev-backend-task-policy"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ssm:GetParameters",
                          + "secretsmanager:GetSecretValue",
                          + "s3:GetObject",
                          + "s3:PutObject",
                          + "s3:ListBucket",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:ssm:us-west-2:727646471395:parameter/ScheduleSync/dev/*",
                          + "arn:aws:secretsmanager:us-west-2:727646471395:secret:ScheduleSync/dev/*",
                          + "arn:aws:s3:::ScheduleSync-dev-*",
                          + "arn:aws:s3:::ScheduleSync-dev-*/*",
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = (known after apply)
    }

  # module.security.aws_iam_role_policy.frontend_task will be created
  + resource "aws_iam_role_policy" "frontend_task" {
      + id     = (known after apply)
      + name   = "ScheduleSync-dev-frontend-task-policy"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ssm:GetParameters",
                          + "secretsmanager:GetSecretValue",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:ssm:us-west-2:727646471395:parameter/ScheduleSync/dev/*",
                          + "arn:aws:secretsmanager:us-west-2:727646471395:secret:ScheduleSync/dev/*",
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = (known after apply)
    }

  # module.security.aws_iam_role_policy_attachment.ecs_task_execution will be created
  + resource "aws_iam_role_policy_attachment" "ecs_task_execution" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      + role       = "ScheduleSync-dev-ecs-execution"
    }

  # module.security.aws_security_group.alb will be created
  + resource "aws_security_group" "alb" {
      + arn                    = (known after apply)
      + description            = "Security group for Application Load Balancer"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTP from internet"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTPS from internet"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
        ]
      + name                   = "ScheduleSync-dev-alb-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-alb-sg"
          + "Project"     = "ScheduleSync"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-alb-sg"
          + "Project"     = "ScheduleSync"
        }
      + vpc_id                 = (known after apply)
    }

  # module.security.aws_security_group.backend will be created
  + resource "aws_security_group" "backend" {
      + arn                    = (known after apply)
      + description            = "Security group for backend ECS service"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "API traffic from ALB"
              + from_port        = 3000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 3000
            },
        ]
      + name                   = "ScheduleSync-dev-backend-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-backend-sg"
          + "Project"     = "ScheduleSync"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-backend-sg"
          + "Project"     = "ScheduleSync"
        }
      + vpc_id                 = (known after apply)
    }

  # module.security.aws_security_group.frontend will be created
  + resource "aws_security_group" "frontend" {
      + arn                    = (known after apply)
      + description            = "Security group for frontend ECS service"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "HTTP from ALB"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "ScheduleSync-dev-frontend-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-frontend-sg"
          + "Project"     = "ScheduleSync"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "ScheduleSync-dev-frontend-sg"
          + "Project"     = "ScheduleSync"
        }
      + vpc_id                 = (known after apply)
    }

  # module.security.aws_security_group_rule.alb_cloudflare_https will be created
  + resource "aws_security_group_rule" "alb_cloudflare_https" {
      + cidr_blocks              = [
          + "173.245.48.0/20",
          + "103.21.244.0/22",
          + "103.22.200.0/22",
          + "103.31.4.0/22",
          + "141.101.64.0/18",
          + "108.162.192.0/18",
          + "190.93.240.0/20",
          + "188.114.96.0/20",
          + "197.234.240.0/22",
          + "198.41.128.0/17",
          + "162.158.0.0/15",
          + "104.16.0.0/13",
          + "104.24.0.0/14",
          + "172.64.0.0/13",
          + "131.0.72.0/22",
        ]
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

Plan: 67 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + alb_dns_name          = (known after apply)
  + backend_service_name  = "ScheduleSync-dev-backend"
  + cloudwatch_log_groups = {
      + backend  = "/ecs/ScheduleSync-dev-backend"
      + frontend = "/ecs/ScheduleSync-dev-frontend"
    }
  + ecs_cluster_name      = "ScheduleSync-dev-cluster"
  + frontend_service_name = "ScheduleSync-dev-frontend"
  + private_subnet_ids    = [
      + (known after apply),
      + (known after apply),
    ]
  + public_subnet_ids     = [
      + (known after apply),
      + (known after apply),
    ]
  + vpc_id                = (known after apply)
